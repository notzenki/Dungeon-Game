extends CharacterBody2D

const SPEED = 15000

@onready var animated_sprite = $AnimatedSprite2D
@onready var timer = $Timer

enum player_states {IDLE, RUN, DODGE, DEAD, HIT, ATTACK}
var current_state: player_states
var can_dodge: bool = true

func _ready():
	current_state = player_states.IDLE

func _physics_process(delta):
	
	handle_movement(delta)
	handle_dodge(delta)
	play_animation()
	move_and_slide()
	
#Get the input direction -1, 0, 1
func handle_movement(delta):
	var direction = Input.get_vector("move_left", "move_right", "move_up", "move_down")
	velocity = direction * SPEED * delta
#Flip the sprite
	if direction.x > 0:
		animated_sprite.flip_h = false
	elif direction.x < 0:
		animated_sprite.flip_h = true
#Character Animations
	if velocity.length() > 0.0 :
		current_state = player_states.RUN
	else:
		current_state = player_states.IDLE
	
func  handle_dodge(delta):
	if Input.is_action_just_pressed("dodge") and can_dodge:
		can_dodge = false
		timer.start()
		current_state = player_states.DODGE
		var direction = Input.get_vector("move_left", "move_right", "move_up", "move_down")
		velocity = direction * SPEED * 10 * delta
		
		
	
func play_animation():
	match current_state:
		player_states.IDLE:
			animated_sprite.play("idle")
		player_states.RUN:
			animated_sprite.play("run")
		player_states.DEAD:
			animated_sprite.play("dead")
		player_states.HIT:
			animated_sprite.play("hit")
		player_states.ATTACK:
			animated_sprite.play("attack")
		player_states.DODGE:
			animated_sprite.play("roll")
		_:
			animated_sprite.play("idle")
	

func _on_timer_timeout():
	can_dodge = true
